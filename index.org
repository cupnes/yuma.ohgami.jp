#+TITLE: 大神　祐真 (Ohgami Yuma) (サークル名:へにゃぺんて)
#+AUTHOR: 大神 祐真 (Ohgami Yuma)
#+LANGUAGE: ja
#+SETUPFILE: ~/git/org-html-themes/setup/theme-bigblow-local.setup
#+OPTIONS: ^:{}

* 名刺代わりなページ
** 主な活動場所
   | ソースコード        | http://github.com/cupnes/                                |
   | ブログ              | https://yohgami.hateblo.jp/                              |
   | 発表資料            | https://www.slideshare.net/yarakawa/                     |
   | YouTube(過去のデモ) | https://www.youtube.com/channel/UC1kKe2fuipI-RC_It9uSGYQ |

*** DONE 最近は使用していない場所
    | 成果物など | http://funlinux.org             |
    | Wiki       | https://www40.atwiki.jp/cupnes/ |

** 同人誌/同人作品
   紙版は[[https://ec.toranoana.shop/tora/ec/cot/circle/2UPAeD6Q8475d260d687/all/][とらのあな様]]と一部は[[https://www.beep-shop.com/ec/products/list?name=%25E3%2581%25B8%25E3%2581%25AB%25E3%2582%2583%25E3%2581%25BA%25E3%2582%2593%25E3%2581%25A6][BEEP様]]、[[https://www.melonbooks.co.jp/circle/index.php?circle_id=104561][メロンブックス様]]にて販売中！

   PDF版・HTML版は無料で公開中！　EPUB版は[[https://bookwalker.jp/author/87619/][BOOK☆WALKER様]]にて販売中！

*** ゲームボーイOS「AMADO」v0.03
    [[https://yohgami.booth.pm/items/2636771][file:amado_v0.03_version.png]]
    → *[[https://yohgami.booth.pm/items/2636771][ROM版(BOOTH)(上記画像リンク先と同じ)]]　　　　　カートリッジ版([[https://www.beep-shop.com/ec/products/detail/BD-2--6965][BEEP]],[[https://ecs.toranoana.jp/tora/ec/item/040030876245/][とらのあな]],[[https://www.melonbooks.co.jp/detail/detail.php?product_id=824942][メロンブックス]])*

    - 初版発行日: 2020/12/30 (エアコミケ2)
    - ゲームボーイ上で動作するOS「AMADO」の2度目のバージョンアップです
    - v0.03で、ハード(カートリッジ)の助けもあり、RAM側に読み書き可能なファイルシステムを搭載しました
    - バイナリエディタを追加したので、RAMのファイルシステム上のファイルを編集できます
      - 実行バイナリをバイナリエディタで編集することで、マシン語プログラミング可能！
    - ソースコード
      - https://github.com/cupnes/sh_gbos/releases/tag/amado_v0.03
    - 追加情報
      - [[https://akiba-pc.watch.impress.co.jp/docs/news/news/1299045.html][AKIBA PC Hotline!様でご紹介いただきました！]]

*** ゲームボーイOS「AMADO」で8ビットマシン語入門
    [[https://techbookfest.org/product/5190959769845760][file:i8bmla_cover.png]]
    → *[[https://techbookfest.org/product/5190959769845760][PDF版(技術書典オンラインマーケット)(上記画像リンク先と同じ)]]　　　　　紙版([[https://www.beep-shop.com/ec/products/detail/BD-3--7866][BEEP]],[[https://ecs.toranoana.jp/tora/ec/item/040030888063/][とらのあな]],[[https://www.melonbooks.co.jp/detail/detail.php?product_id=806410][メロンブックス]])*

    - 初版発行日: 2020/12/26 (技術書典10)
    - ゲームボーイ上で動作するOS「AMADO」を使って、ゲームボーイ上でマシン語プログラミングを体験する本です
    - OS側の関数を使うことで、画面に文字を出力したり、ボタン入力を取得したり、ファイル操作をしたり、といった処理を50バイト程度のマシン語で実装します

*** へにゃぺんて活動報告2020年夏号(PDF版)
    [[https://techbookfest.org/product/5998833303552000][file:har2sp_cover.png]]
    → *[[https://techbookfest.org/product/5998833303552000][PDF版(技術書典オンラインマーケット)(上記画像リンク先と同じ)]]*

    - 初版発行日: 2020/09/12 (技術書典9)
    - オンラインとら祭り2020夏で頒布したGBソフト「へにゃぺんて活動報告2020年夏号」のPDF移植版！
    - PDFのフォーマットの勉強として、テキストエディタを使って手書きで作ったPDFです
    - アノテーションをフル活用し、PDFでOSを表現してみました
    - ファイル一覧の画面に表示されるアイコンをクリックすると、それぞれのコンテンツのページへジャンプします
      - そして、右上のXボタンをクリックするとファイル一覧画面へ戻ります
    - 「技術書」であるので、PDFのフォーマットの学習コンテンツとして、ちょっとしたダンジョン攻略ゲームをつけています
      - ヒントを参考にPDFの仕組みを学びながら、このPDF自体を改造して真の出口見つけてください！
    - ソースコード(といっても単に差分管理されたPDF)：
      - https://github.com/cupnes/pdf_test/releases/tag/tbf09

*** へにゃぺんて活動報告2020年夏号
    [[https://yohgami.booth.pm/items/2265684][file:har2s_cover.png]]
    → *[[https://yohgami.booth.pm/items/2265684][ROM版(BOOTH)(上記画像リンク先と同じ)]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030845833/?circle_new][カートリッジ版(とらのあな)]]*

    - 初版発行日: 2020/08/14 (オンラインとら祭り2020夏)
    - 自作OS等を行っている低レイヤー技術サークル「へにゃぺんて」の最近の活動を紹介するゲームボーイ形式の技術同人誌です！(5画面分のテキストと画像2枚、BGM無し)
    - これ自体がゲームボーイ用自作OS「AMADO」のデモになっています！おまけでライフゲームも同梱！

*** ゲームボーイOS「AMADO(仮)」v0.01
    [[https://yohgami.booth.pm/items/2042170][file:amado_v0.01_version.png]]
    → *[[https://yohgami.booth.pm/items/2042170][ROM版(BOOTH)(上記画像リンク先と同じ)]]*

    - 初版発行日: 2020/05/10 (コミックマーケット98[中止])
    - ゲームボーイ上で動くOSです
    - 読み取り専用ですが、ファイルシステムを備えていて、同梱のテキストと画像を閲覧できます
    - AMADOへ任意のテキストや画像を組み込むツールも同梱しています
    - ソースコード
      - https://github.com/cupnes/sh_gbos/

*** シェルスクリプトでゲームボーイプログラミング入門
    [[file:GB-Programming-with-Shell-Script.pdf][file:gbps_cover.png]]
    → *[[file:GB-Programming-with-Shell-Script.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:GB-Programming-with-Shell-Script][HTML版]]　　　　　紙版([[https://www.beep-shop.com/ec/products/detail/BD-1--3048][BEEP]],[[https://ecs.toranoana.jp/tora/ec/item/040030828703/][とらのあな]])*

    - 初版発行日: 2020/05/10 (コミックマーケット98[中止])
    - シェルスクリプトだけでゲームボーイのROMファイルを作る本です。
    - 筆者が開発し使用しているシェルスクリプト製のアセンブラなどを使用して、ステップバイステップで、タイルによる背景描画、キー入力、画面スクロールまでを行います。
    - サンプルコードは↓で公開しています(GitHub)
      - https://github.com/cupnes/gb_programming_with_shell-script_samples

*** バイナリ生成環境「daisy-tools」実験報告
    [[file:Daisy-Tools_Laboratory_Report.pdf][file:dtlr_cover.png]]
    → *[[file:Daisy-Tools_Laboratory_Report.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:Daisy-Tools_Laboratory_Report][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030816295/][紙版(とらのあな)]]*

    - 初版発行日: 2020/02/29 (技術書典8[中止])
    - 進化的にバイナリを生成する「daisy-tools」というシステムの本です。
    - コンセプトや進化の仕組み、簡単なELFバイナリを生成する実験結果を紹介します！
    - サンプルコードは↓で公開しています(GitHub)
      - https://github.com/cupnes/daisy-tools

*** バイナリ生物学入門
    [[file:Intelligent-Life-in-the-Binary.pdf][file:ilb_cover.png]]
    → *[[file:Intelligent-Life-in-the-Binary.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:Intelligent-Life-in-the-Binary][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030802408/][紙版(とらのあな)]]*

    - 初版発行日: 2019/12/31 (コミックマーケット97)
    - 実行バイナリを生物のように扱う処理系の構造と振る舞いのモデルと、実際に単細胞生物として扱うPoCの実験結果を紹介するネタ本です
    - 実験では、バイナリが生物の振る舞いをしていることと、例として、ウイルス感染した個体が発生しても系としては正常に戻る様子を紹介しています！
    - サンプルコードは↓で公開しています(GitHub)
      - [[https://github.com/cupnes/intelligent_life_in_the_binary_samples]]

*** 作って分かる！x86_64機械語入門
    [[file:Introduction-to-x86_64-Machine-Language.pdf][file:ix86ml_cover.png]]
    → *[[file:Introduction-to-x86_64-Machine-Language.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:Introduction-to-x86_64-Machine-Language][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030802403/][紙版(とらのあな)]]*

    - 初版発行日: 2019/09/22 ([[*2019/09/22: %E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B87][技術書典7]])
    - 一つずつ構文を理解していくことで機械語を書いてみる本です
    - QEMU上でOSレスで動く実行バイナリを書き、CPUを直接制御します
    - サンプルコードは↓で公開しています(GitHub)
      - [[https://github.com/cupnes/introduction_to_x86_64_machine_language_samples]]
    - 追加・訂正情報
      - 「4.3 画面へ1ピクセル描画してみる」(P60)
	- 誤「即値をレジスタ間接で書き込むの場合」→正「即値をレジスタ間接で書き込む場合」
      - 「4.5 ランダム色で塗りつぶしてみる」
	- この節のサンプルプログラムを実行しても真っ暗な画面しか表示されない場合
	  - Ctrl-Alt-3でシリアルコンソール画面を確認してみて下さい
	  - 「!!!! X64 Exception Type - 06(#UD - Invalid Opcode) CPU Apic ID - 00000000 !!!!」というエラーメッセージが出ていて、RIPが0x110014である場合、rdrand命令を解釈できないことでエラーに陥っています
	  - そのような場合は、まずQEMUを実行するホスト側のCPUがrdrand命令に対応しているか確認して下さい。/proc/cpuinfoの「flags:」に「rdrand」があれば対応しています。
	  - 対応している場合は、qemu-system-x86_64コマンドに「-cpu host」のオプションを追加するか、「-cpu IvyBridge」のようにrdrand命令に対応したCPUモデル名を明示的に与えると、この問題を回避できる事があります。
	  - rdrand命令に対応したCPUは[[https://en.wikipedia.org/wiki/RDRAND][Wikipediaの記事]]が参考になります
	  - 「-cpu」オプションで指定可能なモデル名は「qemu-system-x86_64 -cpu help」というコマンドで確認できます
	  - (以上、読者の方からの情報でした。ありがとうございます！)

*** フルスクラッチで作る!x86_64自作OS パート5 てっとりばやくマルチコア
    [[file:x86_64-Jisaku-OS-5.pdf][file:x86jo5_cover.jpg]]
    → *[[file:x86_64-Jisaku-OS-5.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:x86_64-Jisaku-OS-5][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030802379/][紙版(とらのあな)]]*

    - 初版発行日: 2019/08/12 ([[*2019/08/12: %E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8896][コミックマーケット96]])
    - UEFIのサービスを利用してマルチコア処理を手軽に実装する方法を紹介します
    - UEFIを抜けてカーネルへジャンプする以降の内容は一部のUEFIファームウェアでしか実施できないものも含むため参考情報としてご利用ください
    - サンプルコードは↓で公開しています(GitHub)
      - [[https://github.com/cupnes/x86_64_jisaku_os_5_samples]]
    - 追加・訂正情報
      - 本文ではUEFIのEFI_MP_SERVICES_PROTOCOLのWhoAmI()が返す値とLocal APIC IDが、同一のプロセッサコアに対しては同じ値であることを想定していますが、ベンダーの実装によっては異なることもあるそうです。(特にハイパースレッディングを無効にして使用している場合)
      - 「1.4 AP もカーネルへジャンプさせる」は非推奨な方法であることが分かりました
	- StartupAllAPsで各APにカーネルへジャンプさせているのですが、その後ExitBootServicesを実行すると、(おそらく大抵のファームウェアでは)APの処理がUEFI内のhltの無限ループへ強制ジャンプさせられてしまうようです
	- UEFIのプラットフォーム初期化部分の仕様には、「ノンブロッキングで実施したAP上の処理は、ExitBootServicesまでに終えていること」と書かれている(*1)ので、(本書の場合、ブロッキングでタイムアウトさせる場合ではありますが)、StartupAllAPs等で実行した処理がExitBootServices後も継続できる事は期待しないほうが良さそうです
	- (*1) 「UEFI Platform Initialization Specification」の「13.4 MP Services Protocol」

*** フルスクラッチで作る!x86_64自作OS パート4 ぼくらのイーサネットフレーム!
    [[file:x86_64-Jisaku-OS-4.pdf][file:x86jo4_cover.png]]
    → *[[file:x86_64-Jisaku-OS-4.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:x86_64-Jisaku-OS-4][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721490/][紙版(とらのあな)]]*

    - 初版発行日: 2019/04/14 ([[*2019/04/14: %E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B86][技術書典6]])
    - ついにNICドライバを実装！
    - PCIからのデバイス情報取得から始め、NICドライバをフルスクラッチ
    - そして、受信はNICが受信したバイナリ列の取得、送信は用意した任意のバイナリ列(オレオレイーサネットフレーム)のNICからの送出、を行います！
    - サンプルコードは↓で公開しています(GitHub)
      - [[https://github.com/cupnes/x86_64_jisaku_os_4_samples]]

*** フルスクラッチで作る!x86_64自作OS パート3 システムコールの薄い本
    [[file:x86_64-Jisaku-OS-3.pdf][file:x86jo3_cover.jpg]]
    → *[[file:x86_64-Jisaku-OS-3.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:x86_64-Jisaku-OS-3][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721527/][紙版(とらのあな)]]*

    - 初版発行日: 2018/12/30 ([[*2018/12/30: %E3%82%B3%E3%83%9F%E3%83%83%E3%82%AF%E3%83%9E%E3%83%BC%E3%82%B1%E3%83%83%E3%83%8895][コミックマーケット95]])
    - 「フルスクラッチで作る!」シリーズ5冊目！システムコール！
    - システムコールの仕組みを説明し、実装する本です
    - システムコールを実装することで、カーネル・アプリをバイナリレベルで分離します
    - また、アプリからアプリを呼び出す仕組みとして「バックグラウンド」・「フォアグラウンド」それぞれの仕組みも実装します
    - サンプルコードは↓で公開しています(GitHub)
      - [[https://github.com/cupnes/x86_64_jisaku_os_3_samples]]

*** 自作OS自動化のPoCとしての遺伝的MBR
    [[file:Identeki-MBR.pdf][file:gembr_cover.jpg]]
    → *[[file:Identeki-MBR.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:Identeki-MBR][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721523/][紙版(とらのあな)]]*

    - 初版発行日: 2018/10/08 ([[*2018/10/08: %E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B85][技術書典5]])
    - 自作OSの自動化のPoC(概念実証)として、BIOSが最初に実行する512バイトのMBR生成をKVMによるMBRテストツールと遺伝的アルゴリズムのシステムを作って自動化します
    - サンプルコードは↓で公開しています(GitHub)
      - 第1章 /dev/kvmを直接叩いて理解する
	- https://github.com/cupnes/bare_metal_kvm
      - 第2章 既存のコードを改造してMBRテスターを作る
	- [[https://github.com/slowcoder/kvmulate][参考にさせていただいたKVMサンプル(kvmulate)]]
	- [[https://gist.github.com/cupnes/97131c5719f6c1399b089815961c7e79][パッチ]]
      - 第3章 遺伝的MBRを実現する
	- https://github.com/cupnes/ge_mbr

*** フルスクラッチで作る!x86_64自作OS パート2 ACPIでHPET取得してスケジューラを作る本
    [[file:x86_64-Jisaku-OS-2.pdf][file:x86jo2_cover.jpg]]
    → *[[file:x86_64-Jisaku-OS-2.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　　[[file:x86_64-Jisaku-OS-2][HTML版]]　　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721534/][紙版(とらのあな)]]*

    - 初版発行日: 2018/08/10 ([[*2018/08/10: コミックマーケット94][コミックマーケット94]])
    - 「フルスクラッチで作る!」シリーズ4冊目！ACPI！HPET！スケジューラ！
    - 2005年頃からPCのチップセットに組み込まれるようになった比較的新しいタイマーであるHPETの使い方を紹介します
    - HPETのハードウェア情報を取得するためにACPIの使い方から紹介します
    - HPETで割り込み駆動の周期タイマーの設定方法まで紹介し、それを使ってスケジューラを実装します！
    - サンプルコードは↓で公開しています(GitHub)
      - https://github.com/cupnes/x86_64_jisaku_os_2_samples
      - [[https://github.com/cupnes/x86_64_jisaku_os_2_samples/releases][ビルド済みバイナリはこちら]]

*** フルスクラッチで作る!x86_64自作OS
    [[file:x86_64-Jisaku-OS.pdf][file:x86jo_cover.jpg]]
    → *[[file:x86_64-Jisaku-OS.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　[[file:x86_64-Jisaku-OS][HTML版]]　　　　[[https://bookwalker.jp/deac684954-a708-4764-bdbd-6387da6bd8d9/][EPUB版(BOOK☆WALKER)]]　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721540/][紙版(とらのあな)]]*

    - 初版発行日: 2018/04/22 ([[*2018/04/22: 技術書典4][技術書典4]])
    - 「フルスクラッチで作る!」シリーズ3冊目！前著までの内容で作ったブートローダーを使い、その上で動くカーネルとアプリを作る！
    - カーネルとしては、以下を抽象化してアプリへ提供するのみのものです
      - フレームバッファ(画面表示)
      - キーボードコントローラ(キーボード入力)
      - 割り込みコントローラ(割り込み)
      - ファイルシステム(簡易RAM FS)
      - そして、それらを使うアプリとして「画像ビューア」を作ります
    - ブートローダーは前著までの内容で作ったものを使うため、この本から読みはじめてもOK
      - 一部ブートローダーを作る上では説明が不足していた箇所は付録に書いています
    - サンプルコードは↓で公開しています(GitHub)
      - https://github.com/cupnes/x86_64_jisaku_os_samples
      - [[https://github.com/cupnes/x86_64_jisaku_os_samples/releases][ビルド済みバイナリはこちら]]
      - 前著までの内容で作成したブートローダー(poiboot)の[[file:poiboot_20180422.zip][ビルド済みバイナリはこちら]]
      - poibootのソースコードは上記のサンプルコードリポジトリに含めています

*** フルスクラッチで作る!UEFIベアメタルプログラミング パート2
    [[file:UEFI-Bare-Metal-Programming-2_20171022.pdf][file:ubmp2_cover.jpg]]
    → *[[file:UEFI-Bare-Metal-Programming-2_20171022.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　[[file:UEFI-Bare-Metal-Programming-2][HTML版]]　　　　[[https://bookwalker.jp/dee1f90291-ce7a-489c-afae-975ea5e6b077/][EPUB版(BOOK☆WALKER)]]　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721548/][紙版(とらのあな)]]*

    - 初版発行日: 2017/10/22 ([[*2017/10/22: 技術書典3][技術書典3]])
    - エディタとコンパイラだけでUEFIファームウェアを叩く本のパート2です
    - TIPS本
    - サンプルコードは↓で公開しています(GitHub)
      - https://github.com/cupnes/uefi_bare_metal_programming_part2_samples
      - [[file:ubmp2-sample-binaries_20171022.zip][ビルド済みバイナリはこちら]]

*** フルスクラッチで作る!UEFIベアメタルプログラミング
    [[file:ubmp/UEFI-Bare-Metal-Programming_20170811.pdf][file:ubmp/cover.jpg]]
    → *[[file:ubmp/UEFI-Bare-Metal-Programming_20170811.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　[[file:UEFI-Bare-Metal-Programming][HTML版]]　　　　[[https://bookwalker.jp/de50979932-64ac-4b97-b2d5-166565b833d8/][EPUB版(BOOK☆WALKER)]]　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721546/][紙版(とらのあな)]]*

    - 初版発行日: 2017/08/11 ([[*2017/08/11: コミックマーケット92][コミックマーケット92]])
    - ライブラリやツールチェイン等を使わず、エディタとコンパイラだけのフルスクラッチでUEFIファームウェアを叩く方法を紹介します
    - そして、OSっぽいものを作る本です
    - サンプルコードは↓で公開しています(GitHub)
      - https://github.com/cupnes/c92_uefi_bare_metal_programming_samples
      - [[file:ubmp/ubmp-sample-binaries_20170811.zip][ビルド済みバイナリはこちら]]

*** Ohgami's Commentary on OS5
    [[file:ocos5/Ohgamis-Commentary-on-OS5_20170409.pdf][file:ocos5/cover_x240.png]]
    → *[[file:ocos5/Ohgamis-Commentary-on-OS5_20170409.pdf][PDF版(表紙画像リンク先と同じ)]]　　　　[[file:Ohgamis-Commentary-on-OS5][HTML版]]　　　　[[https://bookwalker.jp/de219ee3f9-090b-4ff2-984a-694fa6419ca4/][EPUB版(BOOK☆WALKER)]]　　　　[[https://ecs.toranoana.jp/tora/ec/item/040030721545/][紙版(とらのあな)]]*

    - 初版発行日: 2017/04/09 ([[*2017/04/09: 技術書典2][技術書典2]])
    - QEMU(BIOS + x86 32ビット)向けフルスクラッチ自作OS(OS5)のソースコード+コメンタリー本です
    - [[http://funlinux.org/os5][OS5について詳しくはこちら]]

** 出展情報
*** DONE 2019/11/01: 技術同人誌再販Night★#5
    - 11/1(金) 18:00〜21:00で開催された[[https://techbook-and-ethanol.connpass.com/event/149245/][技術同人誌再販Night★#5]]でブース出展しました!
    - 技術書典7の新刊や、それ以前の既刊の再販です

*** DONE 2019/09/22: 技術書典7
    - 9/22(日)の[[https://techbookfest.org/event/tbf07][技術書典7]]に「配置:く50D」でブース出展します！
      [[https://techbookfest.org/event/tbf07/circle/5688901205229568][file:gijutsushoten7_circlecut.png]]
    - 新刊は機械語を手書きする本「作って分かる！x86_64機械語入門」です
    - 詳しくは[[https://yohgami.hateblo.jp/entry/2019/09/12/222305][ブログ記事]]をご覧下さい

*** DONE 2019/08/12: コミックマーケット96
    - コミックマーケット96の4日目(8/12(月))に"南リ18b"で出展します！
      [[https://webcatalog-free.circle.ms/Circle/14502575][file:c96_circlecut.png]]
    - 新刊は、自作OS向けにてっとりばやくマルチコアを実現する本です
      [[file:x86jo5_cover.jpg]]
      - UEFIの機能を活用することでアセンブラを書くこと無く2つ目以降のコアを立ち上げ、カーネルへジャンプ
      - カーネルでは、今度はUEFI無しでマルチコアを制御
      - システムコールにより指定したコアで任意のアプリを実行できるようにします
      - 目次など詳しくは[[https://yohgami.hateblo.jp/entry/2019/08/03/213150][ブログ記事]]をご覧ください！
    - なお、これまでの既刊もすべて持っていきます！
    - 既刊同様、PDF/HTML版は頒布日以降、このページで公開します

*** DONE 2019/06/01: オープンソースカンファレンス2019 Hokkaido
    - 6/1(土)の[[https://www.ospn.jp/osc2019-do/][オープンソースカンファレンス2019 Hokkaido]]でブース出展しました！
      - [[https://www.ospn.jp/osc2019-do/modules/article/article.php?articleid=1][展示ブース一覧ページ]]
    - 技術書典6の新刊やこれまでの期間の頒布、簡易プロトコルスタックのデモ等を行いました

*** DONE 2019/05/13: 技術同人誌再販Night★#4
    - 5/13(月) 18:00〜21:00で開催された[[https://techbook-and-ethanol.connpass.com/event/127154/][技術同人誌再販Night★#4]]でブース出展しました!
    - 技術書典6の新刊や、それ以前の既刊の再販です

*** DONE 2019/05/03: 埼玉実業実学書典（銭けっと）
    - 5/3(金) 10:00〜18:00で開催された[[https://zeniket.jimdofree.com/][埼玉実業実学書典（銭けっと）]]でブース出展しました!
    - 技術書典6の新刊や、それ以前の既刊の再販です

*** DONE 2019/04/14: 技術書典6
    - 4/14(日)の[[https://techbookfest.org/event/tbf06][技術書典6]]に「配置:う37」でブース出展します！
      [[https://techbookfest.org/event/tbf06/circle/63920002][file:gijutsushoten6_circlecut.png]]
    - 新刊は自作NICドライバ本「ぼくらのイーサネットフレーム!」です
    - 詳しくは[[https://yohgami.hateblo.jp/entry/2019/03/31/162119][ブログ記事]]をご覧下さい

*** DONE 2019/02/24: 第11回 秋コレ
    - 2/24(日)に秋葉原UDXで開催された[[https://akicolle.com/event/akicolle/11/][第11回 秋コレ]]に「配置:し05」でブース出展しました！
    - 前日に出展していた[[*2019/02/23: %E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B92019 Tokyo/Spring][OSC2019Tokyo/Spring]]と同様の出展内容で同人誌頒布と自作OSデモを行っていました

*** DONE 2019/02/23: オープンソースカンファレンス2019 Tokyo/Spring
    - [[https://www.ospn.jp/osc2019-spring/][オープンソースカンファレンス2019 Tokyo/Spring]]の[[https://www.ospn.jp/osc2019-spring/modules/article/article.php?articleid=1][2日目(土)にブース出展しました]]！
    - 昨年末の冬コミ(C95)の新刊である「システムコール本」と、それ以前の自作OSシリーズ本も全て持って行き頒布していました
    - また、デモではおそらく世界初?のゲーム風インタフェースのGUI紹介や、NIC動作確認アプリの紹介を行っていました

*** DONE 昨年以前
**** DONE 2018/12/30: コミックマーケット95
     - コミックマーケット95の2日目(12/30(日))に"東テ55a"で出展します！
       [[https://webcatalog-free.circle.ms/Circle/14207203][file:c95_circlecut.png]]
     - 新刊は「システムコールの薄い本」で、サークルカットでは「x86_64自作OS パート4」と書いていますが、前回の技術書典でこのシリーズとは別の本を出したので、今回でパート3です
       [[file:x86jo3_cover.jpg]]
       - システムコールの仕組みを紹介し、実装してみる本です
       - システムコールにより、カーネルとアプリをバイナリレベルで分離できるようになります
	 - これでいよいよ「OS」と呼んでも良い感じになってきました
       - アプリからアプリを呼ぶ仕組みも、「フォアグラウンド」・「バックグラウンド」のそれぞれで実装します
       - 目次等、詳しくは[[http://d.hatena.ne.jp/cupnes/20181210/1544368577][ブログ記事]]をご覧ください！
     - なお、これまでの既刊もすべて持っていきます！
     - 既刊同様、PDF/HTML版は頒布日以降、このページで公開します

**** DONE 2018/12/04: 技術同人誌再販Night★#3
     - 12/4(火) 18:00〜21:00で開催された[[https://techbook-and-ethanol.connpass.com/event/104668/][技術同人誌再販Night★#3]]でブース出展しました!
     - 技術書典5の新刊や、それ以前の既刊の再販です

**** DONE 2018/10/27-28: オープンソースカンファレンス2018 Tokyo/Fall
     - [[https://www.ospn.jp/osc2018-fall/][オープンソースカンファレンス2018 Tokyo/Fall]]の[[https://www.ospn.jp/osc2018-fall/modules/article/article.php?articleid=1][両日共にブース出展します]]！
     - 技術書典5の新刊である「遺伝的MBR」本や、これまでの既刊である「フルスクラッチで作る!」シリーズも全て持っていきます！
     - 当日はPCでデモなどもできますので、興味があればぜひお立ち寄りください！

**** DONE 2018/10/08: 技術書典5
     10/8(月・祝)の[[https://techbookfest.org/event/tbf05][技術書典5]]に"お07"でブース出展しました！

     [[https://techbookfest.org/event/tbf05/circle/43060002][file:gijutsushoten5_circlecut.png]]

     ↓「自作OS自動化のPoCとしての遺伝的MBR」という本を出しました！

     [[file:gembr_cover.jpg]]

     内容や目次、表紙等、詳しくは[[http://d.hatena.ne.jp/cupnes/20181002/1538498195][ブログ記事]]をご覧ください！

     既刊も持っていきます！

**** DONE 2018/09/09: 第10回 秋コレ
     - 9/9(日)に秋葉原UDXで開催された[[https://akicolle.com/event/akicolle/10/][第10回 秋コレ]]に「配置:れ16」でブース出展しました!
     - コミックマーケット94の新刊や、それ以前の既刊の再販です

**** DONE 2018/09/03: 技術同人誌再販Night★#2
     - 9/3(月) 18:00〜21:00で開催された[[https://techbook-and-ethanol.connpass.com/event/92807/][技術同人誌再販Night★#2]]でブース出展とLTしました!
     - コミックマーケット94の新刊や、それ以前の既刊の再販です
     - LTは「フルスクラッチ自作OSのススメ」というタイトルで当サークルでの「フルスクラッチ」の定義と、ネタとして「日本語シェル」の紹介を行いました

**** DONE 2018/08/10: コミックマーケット94
     - コミックマーケット94の1日目(8/10(金))に"西め42b"で出展します！
       [[https://webcatalog-free.circle.ms/Circle/13916298][file:c94_circlecut.png]]
     - 新刊は「フルスクラッチで作る!x86_64自作OS パート2 ACPIでHPET取得してスケジューラを作る本」(過去最長タイトル)です！
       [[file:x86jo2_cover.jpg]]
       - 2005年頃からPCのチップセットに組み込まれるようになった比較的新しいタイマーであるHPETの使い方を紹介します
       - HPETのハードウェア情報を取得するためにACPIの使い方から紹介します
       - HPETで割り込み駆動の周期タイマーの設定方法まで紹介し、それを使ってスケジューラを実装します！
       - 目次等、詳しくは[[http://d.hatena.ne.jp/cupnes/20180802/1533222426][ブログ記事]]をご覧ください！
     - なお、これまでの既刊もすべて持っていきます！
     - 既刊同様、PDF/HTML版は頒布日以降、このページで公開します

**** DONE 2018/07/07: オープンソースカンファレンス2018 Hokkaido
     - 7/7(土)の[[https://www.ospn.jp/osc2018-do/][オープンソースカンファレンス2018 Hokkaido]]でブース出展します！
       - [[https://www.ospn.jp/osc2018-do/modules/article/article.php?articleid=1][展示ブース一覧ページ]]
     - 技術書典4でも頒布した新刊・既刊同人誌の頒布や、自作OSのデモを行う予定です

**** DONE 2018/07/02: 技術同人誌再販Night★
     - 7/2(月)の[[https://techbook-and-ethanol.connpass.com/event/88620/][技術同人誌再販Night★]]でブース出展します！
     - 技術書典4の新刊の再販や、過去のすべての同人誌も持っていきます！

**** DONE 2018/04/22: 技術書典4
     4/22(日)の[[https://techbookfest.org/event/tbf04][技術書典4]]に"け52"でブース出展します！

     [[https://techbookfest.org/event/tbf04/circle/19280001][file:gijutsushoten4_circlecut.png]]

     ↓「フルスクラッチで作る!x86_64自作OS」という本を出します！

     [[file:x86jo_cover.jpg]]

     - 「フルスクラッチで作る!」シリーズ3冊目！前著までの内容で作ったブートローダーを使い、その上で動くカーネルとアプリを作る！
     - カーネルとしては、以下を抽象化してアプリへ提供するのみのものです
       - フレームバッファ(画面表示)
       - キーボードコントローラ(キーボード入力)
       - 割り込みコントローラ(割り込み)
       - ファイルシステム(簡易RAM FS)
       - そして、それらを使うアプリとして「画像ビューア」を作ります
     - ブートローダーは前著までの内容で作ったものを使うため、この本から読みはじめてもOK
       - 一部ブートローダーを作る上では説明が不足していた箇所は付録に書いています

     目次などは[[http://d.hatena.ne.jp/cupnes/20180418/1524056977][ブログ記事]]をご覧ください！

     既刊も持っていきます！

**** DONE 2017/12/29: コミックマーケット93
     1日目(12/29(金))のLinuxSearchers(LSS)様の「Linux USER Manizx 2017冬号」へ、「UEFIで始める Linux From Scratch」を寄稿しました！

     当日は売り子のお手伝いもしてました！

**** DONE 2017/10/22: 技術書典3
     10/22(日)の[[https://techbookfest.org/event/tbf03][技術書典3]]に"か13"でブース出展します！

     [[https://techbookfest.org/event/tbf03/circle/5667766619078656][file:gijutsushoten3_circlecut.png]]

     表紙・裏表紙画像や目次などは[[http://d.hatena.ne.jp/cupnes/20171014/1507959355][ブログ記事]]をご覧ください！

     [[file:ubmp2_cover.jpg]]

**** DONE 2017/09/09-10: オープンソースカンファレンス2017 Tokyo/Fall
     - [[https://www.ospn.jp/osc2017-fall/modules/article/article.php?articleid=1][9/9(土)-10(日)にブース出展しました！]]

**** DONE 2017/08/11: コミックマーケット92
     - 1日目(8/11(金))に"東た27b"で出展します！
       #+ATTR_HTML: :height 240
       [[https://webcatalog.circle.ms/Circle/13309789][file:c92_circlecut.png]]
     - 新刊: フルスクラッチで作る!UEFIベアメタルプログラミング
       - PDF版は↓からダウンロードできます
         #+ATTR_HTML: :height 240
         [[file:ubmp/UEFI-Bare-Metal-Programming_20170811.pdf][file:ubmp/cover.jpg]]
       - ライブラリやツールチェイン等を使わず、エディタとコンパイラだけのフルスクラッチでUEFIファームウェアを叩く方法を紹介します
       - そして、OSっぽいものを作る本です
       - サンプルコードは↓で公開しています(GitHub)
	 - https://github.com/cupnes/c92_uefi_bare_metal_programming_samples
	 - [[file:ubmp/ubmp-sample-binaries_20170811.zip][ビルド済みバイナリはこちら]]
     - 既刊の"Ohgami's Commentary on OS5"も頒布します
     - 既刊同様、PDF版は頒布日以降にこのページで公開します
     - 目次や表紙については[[http://d.hatena.ne.jp/cupnes/20170801/1501586965][ブログ記事]]を見てみてください

**** DONE 2017/07/15: オープンソースカンファレンス2017 Hokkaido
     - 7/15(土)にブース出展します！
       - [[https://www.ospn.jp/osc2017-do/modules/article/article.php?articleid=1][オープンソースカンファレンス2017 Hokkaido - 展示ブース一覧（204・206会議室）]]
     - "Ohgami's Commentary on OS5"の残りも持っていきますので、興味があればお立ち寄りください！

**** DONE 2017/04/29: 超技術書典
     - [[https://techbookfest.org/event/cho01][超技術書典]]で"Ohgami's Commentary on OS5"を再販します
       - [[https://techbookfest.org/event/cho01/circle/5102167744577536][出展情報はこちら]]
       - 配置: B-20 (1日目(4/29)のみ)
       - [[https://techbookfest.org/event/cho01/circle/5102167744577536][サークル詳細ページ]]
       - 
          #+ATTR_HTML: :height 240
          [[file:henyapente.png]]

**** DONE 2017/04/09: 技術書典2
     - [[https://techbookfest.org/event/tbf02][技術書典2]]で同人誌を出しました！
       - [[https://techbookfest.org/event/tbf02/circle/5747610597982208][出展情報はこちら]]
       - PDF版は以下からダウンロードできます
	 - 
            #+ATTR_HTML: :height 240
            [[file:ocos5/Ohgamis-Commentary-on-OS5_20170409.pdf][file:ocos5/cover.png]]

** 発表情報
*** DONE 2019/09/21: 小江戸らぐ 9月のオフな集まり(第206回)
    - 9/21(土)の[[https://koedolug.connpass.com/event/144815/][小江戸らぐ 9月のオフな集まり(第206回)]]で発表しました
    - 内容は技術書典7新刊である「x86_64機械語本」の紹介です
    - 冒頭の無限ループプログラムからその機械語表現を理解するところまでを紹介しました

*** DONE 昨年以前
**** DONE 2018/12/08: 小江戸らぐ 12月のオフな集まり(第197回)
     - 12/8(土)の[[https://koedolug.connpass.com/event/111548/][小江戸らぐ 12月のオフな集まり(第197回)]]で発表しました
     - 内容は次の冬コミ(C95)の新刊紹介です
     - [[https://figure.uchinokomato.me/maker][ぷちのこメーカー]]というサービスでマスコットキャラクター作ってみたこととかも話しました

**** DONE 2018/04/14: Open Source UN-Conference 2018 Kawagoe
     - 4/14(土)の[[https://koedolug.connpass.com/event/77065/][Open Source UN-Conference 2018 Kawagoe]]でLT発表しました！
     - 当日は、自作OS上で発表していましたが、PDF版は[[https://www.slideshare.net/yarakawa/x8664os][コチラ]]にアップロードしています

**** DONE 2018/02/24: オープンソースカンファレンス2018 Tokyo/Spring
     - 2/24(土)の[[https://www.ospn.jp/osc2018-spring/][オープンソースカンファレンス2018 Tokyo/Spring]]でLT発表しました！

**** DONE 2017/12/02: Cybozu Tech Conference 2017
     - 12/2(土)の[[https://cybozutech2017.qloba.com/][Cybozu Tech Conference 2017]]の[[https://cybozu.connpass.com/event/70374/][東京会場]]でLT発表しました！
     - [[https://www.slideshare.net/yarakawa/cybozuosswalb][発表スライドはこちら]]

**** DONE 2017/10/29: 小江戸らぐ 10月のオフな集まり(第183回)
     - 10/29(日)の[[https://koedolug.connpass.com/event/70516/][小江戸らぐ 10月のオフな集まり(第183回)]]で発表しました。。
     - [[*2017/09/18: 第8回 自作OSもくもく会][第8回 自作OSもくもく会]]と同内容だったのですが、スライド使わずやった所、ぐだぐだに。。。

**** DONE 2017/09/18: 第8回 自作OSもくもく会
     - 9/18(月)の[[https://atnd.org/events/90124][第8回 自作OSもくもく会]]で発表しました！
     - "UEFIで始めるLinux From Scratch"というタイトルで、「UEFIを使うことで簡単にLFSが始められるよ」という(事を伝えたい)内容です
     - [[https://www.slideshare.net/yarakawa/uefilinux-from-scratch][発表スライドはこちら]]

**** DONE 2017/07/22: 第13回 カーネル／VM探検隊＆懇親会@東京
     - 7/22(土)の[[http://kernelvm13.peatix.com/][第13回 カーネル／VM探検隊＆懇親会@東京]]で飛び入りLTしました！
     - 内容はpoiOSの紹介です
     - [[https://youtu.be/GU3NYeWcwDI?t=5h54m27s][発表の様子はYouTubeで公開されています]]

**** DONE 2017/06/18: Debian9 "Stretch" リリースパーティ in Tokyo
     - 6/18(日)の[[https://debianjp.connpass.com/event/58439/][Debian9 "Stretch" リリースパーティ in Tokyo]]でLTしました！
     - "GPD WINでStretchを動かす"というタイトルで、[[http://d.hatena.ne.jp/cupnes/20170505/1494007038][ブログにした]]内容の紹介です
     - [[https://www.slideshare.net/yarakawa/gpd-winstretch][発表スライドはこちら]]

**** DONE 2017/05/09: Tech Pub vol.3―技術書典ふりかえりLT大会！
     - 5/9(火)の[[https://techpub.connpass.com/event/54961/][Tech Pub vol.3―技術書典ふりかえりLT大会！]]でLTしました！
     - "技術書典2/超技術書典ふりかえり: 自作OS本を頒布しました"というタイトルで、技術書典2の頒布物の紹介と結果のふりかえりです
     - [[https://www.slideshare.net/yarakawa/2-os][発表スライドはこちら]]

**** DONE 2017/04/15: Open Source UN-Conference 2017 Kawagoe
     - 4/15(土)の[[https://koedolug.connpass.com/event/47569/][Open Source UN-Conference 2017 Kawagoe]]でLTしました！
     - 内容は[[*2017/04/13: 独自OS委員会第一回公聴会][独自OS委員会第一回公聴会]]と同じです
     - 開催レポート: [[https://www.ospn.jp/press/20170501osunc2017-kawagoe-report.html][今回で5回目！OSunC 2017 川越！！！！ - OSPN Press]]

**** DONE 2017/04/13: 独自OS委員会第一回公聴会
     - 4/13(木)の[[https://fpgastartup.connpass.com/event/53052/][独自OS委員会第一回公聴会]]でLTしました！
     - "UEFI向け自作OSの紹介"というタイトルで、[[*poiOS(%E6%97%A7%EF%BC%9AOS6)][OS6]]の紹介です
     - 発表資料
       - [[https://www.slideshare.net/yarakawa/uefios][SlideShare]]
       - 実行バイナリ版(ストレージへ配置して起動することで発表時点のOS6を試すことができます)
	 - [[file:demo_20170413.zip]](366KB)、[[file:demo_20170413.zip.md5][MD5]]

**** DONE 2017/03/04: わんくま同盟 札幌勉強会 #1
     - 3/4(土)の[[http://www.wankuma.com/seminar/20170304sapporo01/][わんくま同盟 札幌勉強会 #1]]で発表しました！
     - "UEFIベアメタルプログラミング"というタイトルで、UEFIファームウェアを直接叩くやり方の紹介です
     - 発表資料
       - [[http://www.slideshare.net/yarakawa/uefi-73048227][SlideShare]]
       - [[file:wankuma_20170304_sapporo_ohgami.zip][pptx版(zip圧縮済で1.5MB)]]
       - [[file:wankuma.zip][efiバイナリ版(zip圧縮済で11MB)]] , [[file:wankuma.zip.md5][MD5]]

**** DONE 2016/12/17: CLR/H #103 ～ クリスマス オブ ザ デッド ～
     - 12/17(土)の[[https://clrh.connpass.com/event/45552/][CLR/H #103 ～ クリスマス オブ ザ デッド ～]]でLTしました！
     - "【シェル芸】コマンド7つで簡易コンテナ"というタイトルで、chrootとunshareを使ってシェル芸で簡易コンテナを作る内容です
     - [[https://www.slideshare.net/yarakawa/7-70320375][発表スライドはこちら]]

**** DONE 2016/12/10: Mini Debian Conference Japan 2016
     - 12/10(土)のMini Debian Conference Japan 2016でLTしました！
     - "フルスクラッチ自作OS(OS5)の紹介"というタイトルで、[[*OS5][OS5]]の紹介です
     - [[https://www.slideshare.net/yarakawa/osos5][発表スライドはこちら]]

**** DONE 2016/10/22: ゆるくLTをしよう勉強会@旭川
     - 10/22(土)の[[https://connpass.com/event/40108/][ゆるくLTをしよう勉強会@旭川]]でLTしました！
     - [[*OS5][OS5]]追加機能紹介の予定でしたが、高校生の方ばかりだったので、「どうすれば自作OSができるのか」という話へ切り替えました
       - 「"自作OS"といっても魔法でも何でも無く、より下のレイヤーに居るICというハードウェアに対して適切にお願いをするプログラムを書くだけ」という話をしました
       - そして時間を超過しました。。

**** DONE 2016/07/02: CLR/H #clrh101 ～日本の夏、MR の夏～
     - 7/2(土)の[[https://clrh.connpass.com/event/31379/][CLR/H #clrh101 ～日本の夏、MR の夏～]]でLTしました！
     - "Linuxカーネルのライブパッチを試す"というタイトルで、[[http://d.hatena.ne.jp/cupnes/20160724/1469350700][ブログ記事]]の内容を紹介しました
     - [[https://www.slideshare.net/yarakawa/linux-80554182][発表スライドはこちら]]
       - 「その場でライブパッチを試す」というやり方だったので、大したことは書いてないです

**** DONE 2016/06/18: オープンソースカンファレンス2016 Hokkaido
     - 6/18(土)の[[https://www.ospn.jp/osc2016-do/modules/eguide/event.php?eid=2][オープンソースカンファレンス2016 Hokkaido]]でLTしました！
     - "QEMUでARM64bitベアメタルプログラミング"というタイトルで、[[*ARM64ビット(AArch64)ベアメタルプログラミング][AArch64ベアメタルプログラミング]]の紹介です
     - [[https://www.slideshare.net/yarakawa/qemuarm64bit][発表スライドはこちら]]
     - [[https://youtu.be/lFwH6uQ5H7c?t=14m47s][発表の様子もYouTubeで公開されています]]

**** DONE 2016/04/23: CLR/H #clrh99 ～サクラサク～
     - 4/23(土)の[[https://clrh.connpass.com/event/28972/][CLR/H #clrh99 ～サクラサク～]]でLTしました！
     - [[*2016/04/08: 大人の放課後シリーズ#12:『【2000行弱！】x86用自作カーネルの紹介』][大人の放課後シリーズ#12:『【2000行弱！】x86用自作カーネルの紹介』]]のスライドでOS5の概要を紹介しました

**** DONE 2016/04/08: 大人の放課後シリーズ#12:『【2000行弱！】x86用自作カーネルの紹介』
     - 4/8(金)の[[https://otona-after-5.connpass.com/event/27126/][大人の放課後シリーズ#12:『【2000行弱！】x86用自作カーネルの紹介』]]で発表しました！
     - [[*OS5][OS5]]のカーネルの解説です
     - [[https://www.slideshare.net/yarakawa/2000x86][発表スライドはこちら]]

** 主な活動
   - [[*自作OS][自作OS]]
   - [[*ベアメタルプログラミング][ベアメタルプログラミング]]
   - [[*Linux][Linux]]
   - [[*Emacs][Emacs]]
   - [[*電子工作][電子工作]]

** 連絡先
   - E-Mail :: yuma#ohgami.jp (#を@へ変更してください)
   - Twitter :: [[https://twitter.com/yohgami][@yohgami]]
   - GPG Key :: 0xF12327D6 ([[file:yuma_ohgami.pub.asc.txt][public key]])
     #+BEGIN_EXAMPLE
       pub   4096R/F12327D6 2016-06-18
             Key fingerprint = AC8A A096 31F1 C1F7 3502  C9CA B2F2 C10C F123 27D6
       uid                  Yuma Ohgami <yuma@ohgami.jp>
       sub   4096R/1D5816B0 2016-06-18
     #+END_EXAMPLE

** その他
   - 旧姓: 荒川
* 自作OS
** OS5
   - 完全フルスクラッチで独自に作成した初めてのOS
   - ブートローダー・カーネル・アプリ全て含めて3000行程度のコンパクトなOS
   - 主にカーネルの勉強として作っていて、カーネルが持つべき機能一つ一つを最低限の機能でシンプルに実装している
   - アプリはカーネルのテスト用程度のもので、簡単なCUIのみ

   | *対応システム*         | QEMU                                                    |
   | *対応CPU*              | x86(32ビット)                                           |
   | *対応System BIOS*      | レガシーBIOS                                            |
   | *ソフトウェア構成*     | file:Ohgamis-Commentary-on-OS5/aboutos5.html#os5_struct |
   |                        | ※ ブート後、カーネル・アプリ動作中の状態               |
   | *最初のコミット*       | [[https://github.com/cupnes/minimum_real_mode/commit/9a3811682d2393a94f5b3e38d1a475d7a1c38512][2015-02-08]]                                              |
   | *ソースコード*         | リアルモードで動作する最低限のプログラム：              |
   |                        | https://github.com/cupnes/minimum_real_mode             |
   |                        | ↑から分岐：                                            |
   |                        | https://github.com/cupnes/os5/                          |
   | *まとめページ*         | http://funlinux.org/os5/                                |
   | *このOSに関する同人誌* | 「[[*Ohgami's Commentary on OS5][Ohgami's Commentary on OS5]]」                          |
   | *動作デモ*             | ラズパイ上のQEMU(i386)で動作させているデモ：            |
   |                        | https://youtu.be/J5AMeTsV_Fc                            |

** poiOS(旧：OS6)
   - UEFIファームウェア側の機能を直接呼び出すだけでOSっぽいものが作れるのでは？という発想で作ったOS

   | *対応システム*         | QEMU, PC                                                          |
   | *対応CPU*              | x86(64ビット)                                                     |
   | *対応System BIOS*      | UEFI                                                              |
   | *ソフトウェア構成*     | file:UEFI-Bare-Metal-Programming/intro.html#poios_arch            |
   | *最初のコミット*       | [[https://github.com/cupnes/bare_metal_uefi/commit/6fd7c23f9eee622bcfee0829521c85d3d9de628c][2017-01-01]]                                                        |
   | *ソースコード*         | UEFIベアメタルプログラミングを色々試す：                          |
   |                        | https://github.com/cupnes/bare_metal_uefi                         |
   |                        | OS6としてリポジトリ化：                                           |
   |                        | https://github.com/cupnes/os6                                     |
   |                        | 同人誌のサンプルとして作成：                                      |
   |                        | https://github.com/cupnes/c92_uefi_bare_metal_programming_samples |
   |                        | 後に単体でリポジトリ化：                                          |
   |                        | https://github.com/cupnes/poios                                   |
   | *このOSに関する同人誌* | 「[[*%E3%83%95%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%A7%E4%BD%9C%E3%82%8B!UEFI%E3%83%99%E3%82%A2%E3%83%A1%E3%82%BF%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0][フルスクラッチで作る!UEFIベアメタルプログラミング]]」,            |
   |                        | 「[[*%E3%83%95%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%A7%E4%BD%9C%E3%82%8B!UEFI%E3%83%99%E3%82%A2%E3%83%A1%E3%82%BF%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0 %E3%83%91%E3%83%BC%E3%83%882][フルスクラッチで作る!UEFIベアメタルプログラミング パート2]]」     |
   | *動作デモ*             | その① シェル上でファイルアクセス：                               |
   |                        | https://youtu.be/_Y3BebQdb5Y                                      |
   |                        | その② 簡易GUIでファイルアクセス：                                |
   |                        | https://youtu.be/ho--4bYXQ8E                                      |
   |                        | その③ Linuxブート：                                              |
   |                        | https://youtu.be/q0Mw9KVbIqY                                      |

** ゆあOS
   - 自分の64ビットPCを直接制御したいという想いで作っているOS
   - カーネルの抽象的な機能の作り込みより、色々なデバイスを動かしてみる事を優先している
     - HTTP/0.9までのプロトコルスタックを実装してみたり、マルチコアを実験したりしている
   - 主にカーネル・アプリが新規作成部分で、ブートローダーは[[*poiOS(%E6%97%A7%EF%BC%9AOS6)][poiOS]]をベースに作成したpoibootを使用
   - UIとして、ゲーム風UIを搭載

   | *対応システム*         | QEMU, PC                                                                              |
   | *対応CPU*              | x86(64ビット)                                                                         |
   | *対応System BIOS*      | UEFI                                                                                  |
   | *ソフトウェア構成*     | file:x86_64-Jisaku-OS-4/intro.html#x86jo4_arch                                        |
   |                        | ※ ブート後、カーネル・アプリ動作中の状態                                             |
   | *最初のコミット*       | [[https://github.com/cupnes/x86_64_poios_samples/commit/eaad58bd0c4242011ba1bfe39bdd97074942c83a][2018-03-20]]                                                                            |
   | *現在の開発リポジトリ* | OS：                                                                                  |
   |                        | https://github.com/cupnes/yuaos                                                       |
   |                        | ※ ブートローダー・カーネル・ユーザーランドをまとめてディスクイメージを作成           |
   |                        | ブートローダー：                                                                      |
   |                        | https://github.com/cupnes/poiboot                                                     |
   |                        | カーネル：                                                                            |
   |                        | https://github.com/cupnes/yuakernel                                                   |
   |                        | ユーザーランド：                                                                      |
   |                        | https://github.com/cupnes/yuaapps                                                     |
   | *過去の経緯*           | 同人誌のサンプルとして作成：                                                          |
   |                        | https://github.com/cupnes/x86_64_poios_samples                                        |
   |                        | yuaosという単体のリポジトリ化                                                         |
   |                        | (ブートローダー・カーネル・ユーザーランド全部セット)                                  |
   |                        | yuaos,poiboot,yuakernel,yuaappsというリポジトリへ分解                                 |
   |                        | (旧yuaosリポジトリはyuakernelへリネーム)                                              |
   | *このOSに関する同人誌* | 「[[*%E3%83%95%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%A7%E4%BD%9C%E3%82%8B!x86_64%E8%87%AA%E4%BD%9COS][フルスクラッチで作る!x86_64自作OS]]」,                                                |
   |                        | 「[[*%E3%83%95%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%A7%E4%BD%9C%E3%82%8B!x86_64%E8%87%AA%E4%BD%9COS %E3%83%91%E3%83%BC%E3%83%882 ACPI%E3%81%A7HPET%E5%8F%96%E5%BE%97%E3%81%97%E3%81%A6%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%A9%E3%82%92%E4%BD%9C%E3%82%8B%E6%9C%AC][フルスクラッチで作る!x86_64自作OS パート2 ACPIでHPET取得してスケジューラを作る本]]」, |
   |                        | 「[[*%E3%83%95%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%A7%E4%BD%9C%E3%82%8B!x86_64%E8%87%AA%E4%BD%9COS %E3%83%91%E3%83%BC%E3%83%883 %E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%82%B3%E3%83%BC%E3%83%AB%E3%81%AE%E8%96%84%E3%81%84%E6%9C%AC][フルスクラッチで作る!x86_64自作OS パート3 システムコールの薄い本]]」,                 |
   |                        | 「[[*%E3%83%95%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%A7%E4%BD%9C%E3%82%8B!x86_64%E8%87%AA%E4%BD%9COS %E3%83%91%E3%83%BC%E3%83%884 %E3%81%BC%E3%81%8F%E3%82%89%E3%81%AE%E3%82%A4%E3%83%BC%E3%82%B5%E3%83%8D%E3%83%83%E3%83%88%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0!][フルスクラッチで作る!x86_64自作OS パート4 ぼくらのイーサネットフレーム!]]」,          |
   |                        | 「[[*%E3%83%95%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%A9%E3%83%83%E3%83%81%E3%81%A7%E4%BD%9C%E3%82%8B!x86_64%E8%87%AA%E4%BD%9COS %E3%83%91%E3%83%BC%E3%83%885 %E3%81%A6%E3%81%A3%E3%81%A8%E3%82%8A%E3%81%B0%E3%82%84%E3%81%8F%E3%83%9E%E3%83%AB%E3%83%81%E3%82%B3%E3%82%A2][フルスクラッチで作る!x86_64自作OS パート5 てっとりばやくマルチコア]]」                |
   | *動作デモ*             | その① ゲーム風UI、画像ビューア：                                                     |
   |                        | https://youtu.be/LHDmrfDM7xc                                                          |
   |                        | その② HTTP/0.9 GETデモ：                                                             |
   |                        | https://youtu.be/BCTyEREMF6E                                                          |

** AMADO
   - ゲームボーイ向けOS
   - 一つの窓を使いまわすシングルタスクOS
   - バックアップRAMを使うことで、我が家のOSとしては初めて読み書き可能なファイルシステムを備えたOSになった
   - また、バイナリエディタを搭載しマシン語開発可能になったことで、初めてのセルフ開発可能OSにもなった

   | *対応システム*           | ゲームボーイ                                           |
   | *対応CPU*                | LR35902                                                |
   | *最初のコミット*         | [[https://github.com/cupnes/sh_gbos/commit/1c900535afd00113aa89f6a478507f956e3b4117][2020-03-27]]                                             |
   | *ソースコード*           | https://github.com/cupnes/sh_gbos                      |
   | *このOSに関する同人誌*   | 「[[*%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%A7%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%9C%E3%83%BC%E3%82%A4%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80][シェルスクリプトでゲームボーイプログラミング入門]]」,  |
   |                          | 「[[*%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%9C%E3%83%BC%E3%82%A4OS%E3%80%8CAMADO%E3%80%8D%E3%81%A78%E3%83%93%E3%83%83%E3%83%88%E3%83%9E%E3%82%B7%E3%83%B3%E8%AA%9E%E5%85%A5%E9%96%80][ゲームボーイOS「AMADO」で8ビットマシン語入門]]」       |
   | *このOSに関する同人作品* | 「[[*%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%9C%E3%83%BC%E3%82%A4OS%E3%80%8CAMADO(%E4%BB%AE)%E3%80%8Dv0.01][ゲームボーイOS「AMADO(仮)」v0.01]]」,                  |
   |                          | 「[[*%E3%81%B8%E3%81%AB%E3%82%83%E3%81%BA%E3%82%93%E3%81%A6%E6%B4%BB%E5%8B%95%E5%A0%B1%E5%91%8A2020%E5%B9%B4%E5%A4%8F%E5%8F%B7][へにゃぺんて活動報告2020年夏号]](v0.02)」,             |
   |                          | 「[[*%E3%82%B2%E3%83%BC%E3%83%A0%E3%83%9C%E3%83%BC%E3%82%A4OS%E3%80%8CAMADO%E3%80%8Dv0.03][ゲームボーイOS「AMADO」v0.03]]」                       |
   | *開発中のデモ*           | カートリッジRAM保存デモ：                              |
   |                          | https://twitter.com/yohgami/status/1322867723106332672 |
   |                          | バイナリエディタデモ：                                 |
   |                          | https://twitter.com/yohgami/status/1329456768779423744 |
   |                          | カートリッジRAMリストアデモ：                          |
   |                          | https://twitter.com/yohgami/status/1332704263617662979 |

* ベアメタルプログラミング
** UEFIベアメタルプログラミング
   - UEFI+x86_64でのOS自作をフルスクラッチでやれるよう、まずはUEFIの勉強としてベアメタルプログラミングをしています
   - 勉強した結果 => [[*poiOS(%E6%97%A7%EF%BC%9AOS6)][OS6]] => 同人誌向けに作り直し => poiOS

*** ソースコードリポジトリ
    - ベアメタルプログラミングネタ集
      - https://github.com/cupnes/bare_metal_uefi
    - poiOS
      - https://github.com/cupnes/poios

*** ブログ記事
    - [[http://d.hatena.ne.jp/cupnes/20170408/1491654807][UEFIベアメタルプログラミング - Hello UEFI!(ベアメタルプログラミングの流れについて)]]
    - [[http://d.hatena.ne.jp/cupnes/20170503/1493787477][UEFIベアメタルプログラミング - マルチコアを制御する]]

** ARM64ビット(AArch64)ベアメタルプログラミング
   - AArch64を試したくRaspberry Pi 3を買ったら、Raspbianは32ビットだったのでベアメタルプログラミングしました

*** ソースコードリポジトリ
    - http://d.hatena.ne.jp/cupnes/20160529/1464513206

*** ブログ記事
    - シリーズ記事: [[http://d.hatena.ne.jp/cupnes/20160529/1464513206][Raspberry Pi 3で64bitベアメタル(bare metal)プログラミング]]

** x86 32ビットベアメタルプログラミング
   - [[http://d.hatena.ne.jp/cupnes/20150103/1420308953][プロテクトモードへ移行し、C言語のmain()実行までのサンプルプログラム]]
     - [[*OS5][OS5]]と呼ぶ前までに作っていたものです
   - [[https://github.com/cupnes/as_tanka_codejp]["CodeJP"アセンブラ短歌]]
   - [[https://github.com/cupnes/asm_zundoko][x86アセンブラでOSレスのズンドコきよし]]
** AGC(Apollo Guidance Computer)ベアメタルプログラミング
   - Apollo11号の航行制御を行っていたAGC(Apollo Guidance Computer、アポロ誘導コンピュータ)のソースコードが[[https://github.com/chrislgarry/Apollo-11][GitHubで公開されました]]
   - そして、[[http://www.ibiblio.org/apollo/][アセンブラとエミュレータも公開されています]]
   - そこで、AGCのエミュレータ上で動くプログラムをベアメタルプログラミングしてみました

*** 作業場所
    - https://github.com/cupnes/bare_metal_agc

*** その他
    - [[https://codejp.connpass.com/event/34473/][Code 2016 in 定山渓温泉]]にて、Virtual AGCのDSKYでGit buttonをつくりました
    - その場でシェル芸との組み合わせででっち上げただけなので、残っておらず。。
      - というより、単体のプログラムというものでもない
** 6502(ファミコン)ベアメタルプログラミング
   - アセンブル/逆アセンブルの確認まで

*** ブログ記事
    - [[http://d.hatena.ne.jp/cupnes/20140831/1409469778][Debian 7.6(wheezy)でファミコン(NES)プログラミング(6502アセンブル/逆アセンブル)]]

* Linux
** kernel
*** livepatch
    - [[http://d.hatena.ne.jp/cupnes/20160724/1469350700][out of treeでライブパッチを試す、/dev/nullへのパッチ紹介]]
    - [[http://d.hatena.ne.jp/cupnes/20170913/1505320244][Linux 4.12: livepatch: 適用したライブパッチを無効化する機能の動作確認]]

*** cgroup
    - [[http://d.hatena.ne.jp/cupnes/20161106/1478528215][libcgroup無しで、cgroupによるプロセスへのCPU割り当て制限]]

*** debug
    - [[http://d.hatena.ne.jp/cupnes/20150906/1441494952][Kprobesの使い方]]
    - [[http://d.hatena.ne.jp/cupnes/20150906/1441494771][ftraceの使い方]]
    - [[http://d.hatena.ne.jp/cupnes/20150906/1441494239][dyndbg(dynamic debug)の使い方]]

*** getcpu_cache (副題:pwclientの使い方)
    - [[http://d.hatena.ne.jp/cupnes/20160224/1456325843][getcpu_cacheシステムコール追加パッチを試してみました(前編: pwclientでパッチ適用まで)]]
    - [[http://d.hatena.ne.jp/cupnes/20160225/1456410770][getcpu_cacheシステムコール追加パッチを試してみました(後編: サンプルを動かしてみた)]]

*** signal
    - [[http://d.hatena.ne.jp/cupnes/20150504/1430712820][シグナルの使い方と実装について]]

*** file system
    - [[https://gist.github.com/cupnes/11150ad9676cd969bdd6ce497a3290ec][WalBのコンパイルエラー解消パッチ]]
      - 4.14のmerge window中で[[https://walb-linux.github.io/][WalB]]がビルドエラーに陥っていた
      - BIO関連の構造体が変わっていたので、変更に合わせて修正
    - [[http://d.hatena.ne.jp/cupnes/20141222/1419265442][mkdosfsで遊ぶ]]

*** init
    - [[http://d.hatena.ne.jp/cupnes/20140920/1411202118][今さらだけど、startparについて]]

*** リリース時のリーナスのメールの翻訳
    - [[http://d.hatena.ne.jp/cupnes/20160402/1459588362][Linux 4.6-rc1がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160316/1458129107][Linux 4.5がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160307/1457349023][Linux 4.5-rc7(最後のrc)がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160229/1456752939][Linux 4.5-rc6がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160221/1456016530][Linux 4.5-rc5がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160215/1455546238][Linux 4.5-rc4がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160211/1455176120][Linux 4.5-rc3がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160201/1454335928][Linux 4.5-rc2がリリースされました]]
    - [[http://d.hatena.ne.jp/cupnes/20160125/1453733924][Linux 4.5-rc1 のLinus発表を訳してみました]]

*** ビルド・動確
    - [[http://d.hatena.ne.jp/cupnes/20160111/1452508221][Linuxカーネル4.4をビルド・動作確認と差分について(ゴホッ、android-x86、ゴホッのx86-32 sysenter ABI誤用について)]]
    - [[http://d.hatena.ne.jp/cupnes/20151103/1446518550][Linuxカーネル4.3をビルド・起動確認してみました]]
    - [[http://d.hatena.ne.jp/cupnes/20150831/1441028435][Linuxカーネル4.2をビルド・インストール]]
    - [[http://d.hatena.ne.jp/cupnes/20150622/1434978660][Linuxカーネル4.1をビルド・インストール]]
    - [[http://d.hatena.ne.jp/cupnes/20150413/1428929039][Linux 4.0ビルド・起動確認と、ライブパッチソースの在り処]]
    - [[http://d.hatena.ne.jp/cupnes/20140817/1408237937][CentOS 6.5でLinuxカーネル 3.16.1をビルド]]
    - [[http://d.hatena.ne.jp/cupnes/20140817/1408236333][Debian 7.6(wheezy)でLinuxカーネル 3.16.1をビルド]]
    - [[http://d.hatena.ne.jp/cupnes/20141224/1419438505][linux-0.01-rm-3.5をQEMU上で実行]]

** シェル芸
   - [[http://d.hatena.ne.jp/cupnes/20161215/1481755818][chrootとunshareを使い、シェル上でコマンド7つで簡易コンテナ]]
   - [[http://d.hatena.ne.jp/cupnes/20140819/1408472244][シェルスクリプトでスケジューラ]]
   - [[http://d.hatena.ne.jp/cupnes/20140805/1407246583][文字(列)をアスキーアートで表示する3つのコマンド]]
   - [[http://d.hatena.ne.jp/cupnes/20140805/1407245191][ターミナル起動時に今日の予定を表示する]]
   - [[http://d.hatena.ne.jp/cupnes/20140726/1406379170][数探しシェルスクリプト]]
     - シェルスクリプトで再帰を使うサンプル
   - [[http://d.hatena.ne.jp/cupnes/20140721/1405926640][あるディレクトリ以下の総ファイルサイズを取得するには]]
     - duはブロックサイズなので、findとawkでファイルサイズの総和を得る
   - [[http://d.hatena.ne.jp/cupnes/20140721/1405924356][千早ニュースを取得するシェルスクリプト]]
   - [[http://d.hatena.ne.jp/cupnes/20130331/1364709523][マイク入力の録音]]
     - arecordの使用例

*** gimg: Google画像検索結果のダウンロード
    - [[http://d.hatena.ne.jp/cupnes/20130320/1363769848][Google画像検索の1件目をダウンロードするスクリプト]]
    - [[http://d.hatena.ne.jp/cupnes/20130320/1363782346][Google画像検索ダウンロードにサイズと保存ファイル名オプション追加]]
    - [[http://d.hatena.ne.jp/cupnes/20130323/1364053156][画像検索結果上位N番目のダウンロードとランダムな壁紙設定]]
    - [[http://d.hatena.ne.jp/cupnes/20130604/1370354611][Google画像検索ダウンロードに色指定機能を追加]]

** debian/raspbian
   - [[http://d.hatena.ne.jp/cupnes/20170505/1494007038][GPD WINへDebian 8(Jessie)をインストール]]
   - [[http://d.hatena.ne.jp/cupnes/20160303/1457014339][Raspbian Jessie LiteイメージからOS構築(日本語環境・X Window System等)]]

** jslinux
   - [[http://d.hatena.ne.jp/cupnes/20130403/1364974831][jslinux向けに最新カーネル3.8.5をビルド]]
   - [[http://d.hatena.ne.jp/cupnes/20130406/1365243767][jslinux向けに最新カーネル3.8.5をビルド(つづき)]]

** その他
   - [[http://d.hatena.ne.jp/cupnes/20150222/1424566626][USB FDDのmountで"can't read superblock"と言われるときは]]
   - [[http://d.hatena.ne.jp/cupnes/20141227/1419702127][EV3を買いました(レコードプレイヤータイマー)]]
   - [[http://d.hatena.ne.jp/cupnes/20140101/1388570407][フレームバッファ・コンソールで快適に生活する為のまとめ]]
   - [[http://d.hatena.ne.jp/cupnes/20130414/1365922107][GNU Screen開発版(4.1.0)でビルド時にエラー]]

* Emacs
** ブログ記事
   - [[http://d.hatena.ne.jp/cupnes/20141221/1419170705][Caskでパッケージ管理を始めました]]
   - [[http://d.hatena.ne.jp/cupnes/20130429/1367224959][gamegrid.elで遊んでみよう]]
   - [[http://d.hatena.ne.jp/cupnes/20130402/1364895193][EmacsからPDF出力]]
   - [[http://d.hatena.ne.jp/cupnes/20130401/1364806604][Emacs 24.3のインストール]]
     - debian上でemacsをビルド・インストールする

** org-html-themes
   - このページはEmacsのorg-modeで作成し、[[https://github.com/fniessen/org-html-themes][org-html-themes]] のテーマを使用してHTMLへエクスポートしています
   - 元のorgファイルは以下で公開しています
     - https://github.com/cupnes/yuma.ohgami.jp

* 電子工作
** AVRマイコン
   - [[http://d.hatena.ne.jp/cupnes/20160228/1456646962][AVRマイコンで電卓もどきを作ってます(SC1602 LCDとキーマトリクスモジュール)]]
   - [[http://d.hatena.ne.jp/cupnes/20160214/1455467810][Debian Jessie上にAVRマイコン開発環境構築～LEDチカチカまで]]

** その他
   - [[http://d.hatena.ne.jp/cupnes/20130227/1361975773][トランジスタで論理ゲート製作（ANDゲート）]]
